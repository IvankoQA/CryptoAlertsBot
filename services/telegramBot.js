const axios = require("axios");
const config = require("../config");
const telegramService = require("./telegram");
const marketService = require("./market");
const aiService = require("./ai");

let webhookUrl = null;

// ====== Set Webhook ======
async function setWebhook(url) {
  try {
    webhookUrl = url;
    const response = await axios.post(
      `https://api.telegram.org/bot${config.BOT_TOKEN}/setWebhook`,
      {
        url: url
      }
    );
    console.log("‚úÖ Webhook set successfully:", url);
    return response.data;
  } catch (err) {
    console.error("‚ùå Webhook setup failed:", err.message);
    return null;
  }
}

// ====== Delete Webhook ======
async function deleteWebhook() {
  try {
    const response = await axios.post(
      `https://api.telegram.org/bot${config.BOT_TOKEN}/deleteWebhook`
    );
    console.log("‚úÖ Webhook deleted successfully");
    return response.data;
  } catch (err) {
    console.error("‚ùå Webhook deletion failed:", err.message);
    return null;
  }
}

// ====== Handle Commands ======
async function handleCommand(command, chatId) {
  try {
    switch (command) {
      case "/start":
        await sendWelcomeMessage(chatId);
        break;
      case "/report":
        await sendReport(chatId);
        break;
      case "/status":
        await sendStatus(chatId);
        break;
      case "/help":
        await sendHelp(chatId);
        break;
      default:
        await telegramService.sendMessage("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
    }
  } catch (err) {
    console.error("Command handling failed:", err.message);
    await telegramService.sendMessage("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã");
  }
}

// ====== Handle Callback Query ======
async function handleCallbackQuery(callbackQuery) {
  try {
    const { id, data } = callbackQuery;
    
    switch (data) {
      case "report":
        await telegramService.answerCallbackQuery(id, "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...");
        await sendReport();
        break;
      case "status":
        await telegramService.answerCallbackQuery(id, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...");
        await sendStatus();
        break;
      case "help":
        await telegramService.answerCallbackQuery(id, "üìñ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø—Ä–∞–≤–∫—É...");
        await sendHelp();
        break;
      default:
        await telegramService.answerCallbackQuery(id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
  } catch (err) {
    console.error("Callback query handling failed:", err.message);
    await telegramService.answerCallbackQuery(callbackQuery.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
  }
}

// ====== Send Welcome Message ======
async function sendWelcomeMessage(chatId = config.CHAT_ID) {
  const message = `ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Bot!*

–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üìä /report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å
üîç /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
üìñ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:*`;

  const keyboard = [
    [
      { text: "üìä –û—Ç—á–µ—Ç", callback_data: "report" },
      { text: "üîç –°—Ç–∞—Ç—É—Å", callback_data: "status" }
    ],
    [
      { text: "üìñ –°–ø—Ä–∞–≤–∫–∞", callback_data: "help" }
    ]
  ];

  await telegramService.sendMessageWithKeyboard(message, keyboard);
}

// ====== Send Report ======
async function sendReport(chatId = config.CHAT_ID) {
  try {
    await telegramService.sendMessage("üìä *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...*");
    
    const { prices, btcDominance } = await marketService.getMarketData();
    let message = "üöÄ *Crypto Report*\n\n";
    
    config.COINS.forEach((coin) => {
      const p = prices[coin];
      if (p && p.usd) {
        const change24h = typeof p.change_24h === "number" ? p.change_24h.toFixed(2) : "N/A";
        const change7d = typeof p.change_7d === "number" ? p.change_7d.toFixed(2) : "";
        const low24h = p.usd_24h_low?.toLocaleString() || "N/A";
        const high24h = p.usd_24h_high?.toLocaleString() || "N/A";

        message += `*${coin.toUpperCase()}*\n`;
        message += `üí∞ Current: $${p.usd.toLocaleString()}\n`;
        message += `üìä 24h: ${change24h}%${change7d ? ` (7d: ${change7d}%)` : ''}\n`;
        message += `üìâ Min: $${low24h}\n`;
        message += `üìà Max: $${high24h}\n\n`;
      } else {
        message += `*${coin.toUpperCase()}*: Data unavailable\n\n`;
      }
    });
    
    const dominance = btcDominance?.toFixed(2) || "N/A";
    message += `üìà BTC Dominance: ${dominance}%\n\n`;
    
    // Add AI analysis
    try {
      const aiAdvice = await aiService.getAIAdvice(prices, btcDominance);
      message += `ü§ñ *AI Analysis:*\n${aiAdvice}\n\n`;
    } catch (err) {
      message += `‚ö†Ô∏è *AI analysis unavailable.* Monitor price movements manually.\n\n`;
    }
    
    await telegramService.sendMessage(message);
  } catch (err) {
    console.error("Report generation failed:", err.message);
    await telegramService.sendMessage("‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// ====== Send Status ======
async function sendStatus(chatId = config.CHAT_ID) {
  try {
    const message = `üîç *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤*

üìä *Market Data:*
‚Ä¢ Binance API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ CoinGecko API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

ü§ñ *AI Services:*
‚Ä¢ OpenAI: ${await aiService.testOpenAI() ? "‚úÖ" : "‚ùå"}
‚Ä¢ Gemini: ${await aiService.testGemini() ? "‚úÖ" : "‚ùå"}
‚Ä¢ DeepSeek: ${await aiService.testDeepSeek() ? "‚úÖ" : "‚ùå"}

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ: ${config.CHECK_INTERVAL_MIN} –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${config.PRICE_ALERT_THRESHOLD}%
‚Ä¢ –û—Ç—á–µ—Ç—ã –≤: ${config.SCHEDULED_REPORT_HOURS.join(", ")}:00

‚úÖ *–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä—ã–Ω–æ–∫*`;

    await telegramService.sendMessage(message);
  } catch (err) {
    console.error("Status check failed:", err.message);
    await telegramService.sendMessage("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞*");
  }
}

// ====== Send Help ======
async function sendHelp(chatId = config.CHAT_ID) {
  const message = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üìä /report - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
üîç /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
üìñ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
üö® Price Alerts - –∫–∞–∂–¥—ã–µ ${config.CHECK_INTERVAL_MIN} –º–∏–Ω—É—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > ${config.PRICE_ALERT_THRESHOLD}%
üìä Scheduled Reports - –≤ ${config.SCHEDULED_REPORT_HOURS.join(", ")}:00

*–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:*
${config.COINS.map(coin => `‚Ä¢ ${coin.toUpperCase()}`).join("\n")}

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ AI:*
‚Ä¢ OpenAI GPT
‚Ä¢ Google Gemini
‚Ä¢ DeepSeek

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ—è—Ö.`;

  await telegramService.sendMessage(message);
}

// ====== Process Webhook Update ======
async function processUpdate(update) {
  try {
    if (update.message) {
      const { text, chat } = update.message;
      if (text && text.startsWith("/")) {
        await handleCommand(text, chat.id);
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
  } catch (err) {
    console.error("Update processing failed:", err.message);
  }
}

module.exports = {
  setWebhook,
  deleteWebhook,
  handleCommand,
  handleCallbackQuery,
  processUpdate,
  sendWelcomeMessage,
  sendReport,
  sendStatus,
  sendHelp
};
